--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_nma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode155w[1..0]	: WIRE;
	w_anode164w[3..0]	: WIRE;
	w_anode181w[3..0]	: WIRE;
	w_anode191w[3..0]	: WIRE;
	w_anode201w[3..0]	: WIRE;
	w_anode211w[3..0]	: WIRE;
	w_anode221w[3..0]	: WIRE;
	w_anode231w[3..0]	: WIRE;
	w_anode241w[3..0]	: WIRE;
	w_anode253w[1..0]	: WIRE;
	w_anode260w[3..0]	: WIRE;
	w_anode271w[3..0]	: WIRE;
	w_anode281w[3..0]	: WIRE;
	w_anode291w[3..0]	: WIRE;
	w_anode301w[3..0]	: WIRE;
	w_anode311w[3..0]	: WIRE;
	w_anode321w[3..0]	: WIRE;
	w_anode331w[3..0]	: WIRE;
	w_data153w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode331w[3..3], w_anode321w[3..3], w_anode311w[3..3], w_anode301w[3..3], w_anode291w[3..3], w_anode281w[3..3], w_anode271w[3..3], w_anode260w[3..3]), ( w_anode241w[3..3], w_anode231w[3..3], w_anode221w[3..3], w_anode211w[3..3], w_anode201w[3..3], w_anode191w[3..3], w_anode181w[3..3], w_anode164w[3..3]));
	w_anode155w[] = ( (w_anode155w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode164w[] = ( (w_anode164w[2..2] & (! w_data153w[2..2])), (w_anode164w[1..1] & (! w_data153w[1..1])), (w_anode164w[0..0] & (! w_data153w[0..0])), w_anode155w[1..1]);
	w_anode181w[] = ( (w_anode181w[2..2] & (! w_data153w[2..2])), (w_anode181w[1..1] & (! w_data153w[1..1])), (w_anode181w[0..0] & w_data153w[0..0]), w_anode155w[1..1]);
	w_anode191w[] = ( (w_anode191w[2..2] & (! w_data153w[2..2])), (w_anode191w[1..1] & w_data153w[1..1]), (w_anode191w[0..0] & (! w_data153w[0..0])), w_anode155w[1..1]);
	w_anode201w[] = ( (w_anode201w[2..2] & (! w_data153w[2..2])), (w_anode201w[1..1] & w_data153w[1..1]), (w_anode201w[0..0] & w_data153w[0..0]), w_anode155w[1..1]);
	w_anode211w[] = ( (w_anode211w[2..2] & w_data153w[2..2]), (w_anode211w[1..1] & (! w_data153w[1..1])), (w_anode211w[0..0] & (! w_data153w[0..0])), w_anode155w[1..1]);
	w_anode221w[] = ( (w_anode221w[2..2] & w_data153w[2..2]), (w_anode221w[1..1] & (! w_data153w[1..1])), (w_anode221w[0..0] & w_data153w[0..0]), w_anode155w[1..1]);
	w_anode231w[] = ( (w_anode231w[2..2] & w_data153w[2..2]), (w_anode231w[1..1] & w_data153w[1..1]), (w_anode231w[0..0] & (! w_data153w[0..0])), w_anode155w[1..1]);
	w_anode241w[] = ( (w_anode241w[2..2] & w_data153w[2..2]), (w_anode241w[1..1] & w_data153w[1..1]), (w_anode241w[0..0] & w_data153w[0..0]), w_anode155w[1..1]);
	w_anode253w[] = ( (w_anode253w[0..0] & data_wire[3..3]), enable_wire);
	w_anode260w[] = ( (w_anode260w[2..2] & (! w_data153w[2..2])), (w_anode260w[1..1] & (! w_data153w[1..1])), (w_anode260w[0..0] & (! w_data153w[0..0])), w_anode253w[1..1]);
	w_anode271w[] = ( (w_anode271w[2..2] & (! w_data153w[2..2])), (w_anode271w[1..1] & (! w_data153w[1..1])), (w_anode271w[0..0] & w_data153w[0..0]), w_anode253w[1..1]);
	w_anode281w[] = ( (w_anode281w[2..2] & (! w_data153w[2..2])), (w_anode281w[1..1] & w_data153w[1..1]), (w_anode281w[0..0] & (! w_data153w[0..0])), w_anode253w[1..1]);
	w_anode291w[] = ( (w_anode291w[2..2] & (! w_data153w[2..2])), (w_anode291w[1..1] & w_data153w[1..1]), (w_anode291w[0..0] & w_data153w[0..0]), w_anode253w[1..1]);
	w_anode301w[] = ( (w_anode301w[2..2] & w_data153w[2..2]), (w_anode301w[1..1] & (! w_data153w[1..1])), (w_anode301w[0..0] & (! w_data153w[0..0])), w_anode253w[1..1]);
	w_anode311w[] = ( (w_anode311w[2..2] & w_data153w[2..2]), (w_anode311w[1..1] & (! w_data153w[1..1])), (w_anode311w[0..0] & w_data153w[0..0]), w_anode253w[1..1]);
	w_anode321w[] = ( (w_anode321w[2..2] & w_data153w[2..2]), (w_anode321w[1..1] & w_data153w[1..1]), (w_anode321w[0..0] & (! w_data153w[0..0])), w_anode253w[1..1]);
	w_anode331w[] = ( (w_anode331w[2..2] & w_data153w[2..2]), (w_anode331w[1..1] & w_data153w[1..1]), (w_anode331w[0..0] & w_data153w[0..0]), w_anode253w[1..1]);
	w_data153w[2..0] = data_wire[2..0];
END;
--VALID FILE
